// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: docs.ipynb

import path from "node:path";
import type { Config } from "jurassic/config.ts";
import { getNotebooksToProcess, loadNb } from "jurassic/notebooks.ts";
import type { Cell } from "jurassic/notebooks.ts";
const isDocCell = (cell: Cell): boolean => cell.cell_type === "markdown";
const moduleHeader = (): string => `
---
outline: deep
---
`;

const processNb = async (
  nbPath: string,
  moduleName: string,
): Promise<string> => {
  // TODO: make use of moduleName
  console.log("Processing notebook", moduleName);
  const nb = await loadNb(nbPath);
  // doc cells only
  return nb.cells.filter((cell) => isDocCell(cell)).reduce(
    (acc, cell) => acc + "\n" + cell.source.join(""),
    moduleHeader(),
  ).trim();
};
const indexMd = `
---
# https://vitepress.dev/reference/default-theme-home-page
layout: home

hero:
  name: "Jurassic"
  text: "Jurassic docs"
  tagline: My great project tagline
  actions:
    - theme: brand
      text: Markdown Examples
      link: /markdown-examples
    - theme: alt
      text: API Examples
      link: /api-examples

features:
  - title: Feature A
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
  - title: Feature B
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
  - title: Feature C
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
---
`.trim();
const packageJSON = `
{
  "name": "docs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "docs:dev": "vitepress dev",
    "docs:build": "vitepress build",
    "docs:preview": "vitepress preview"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "vitepress": "^1.5.0"
  }
}`.trim();
const vitePressConfig = (notebooks: string[]): string => {
  const docs = `{
        text: "Docs",
        items: ${
    JSON.stringify(
      // sort by notebook name length for now
      [...notebooks].sort((a, b) => a.length - b.length).map((nb) => ({
        text: nb,
        link: `/${nb.replace(".ipynb", "")}`,
      })),
    )
  },
      },`;
  return `
import { defineConfig } from "vitepress";

// https://vitepress.dev/reference/site-config
export default defineConfig({
  title: "Jurassic",
  description: "Jurassic docs",
  base: "/jurassic/",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "Home", link: "/" },
    ],

    search: {
      provider: "local",
    },

    sidebar: [${docs}],

    socialLinks: [
      { icon: "github", link: "https://github.com/vuejs/vitepress" },
    ],
  },
});
`.trim();
};
const gitIgnore = `
node_modules
.vitepress/dist
`.trim();
export const generateDocs = async (
  notebookPath: string,
  config: Config,
): Promise<void> => {
  const notebooksToProcess: string[] = await getNotebooksToProcess(
    notebookPath,
    config,
  );

  try {
    await Deno.stat(config.docsPath);
    await Deno.remove(config.docsPath, { recursive: true });
  } catch {
    // noop
  }

  // let's go through all notebooks and process them one by one
  for (const notebook of notebooksToProcess) {
    // output module is the same as the input notebook, but with .ts extension
    const outputFile = notebook.replace(".ipynb", ".md");
    // make sure we preserve subdirectories if any
    const outputDir = path.join(config.docsPath, path.dirname(outputFile));
    await Deno.mkdir(outputDir, { recursive: true });
    await Deno.writeTextFile(
      path.join(config.docsPath, outputFile),
      await processNb(path.resolve(config.nbsPath, notebook), notebook),
    );
  }

  const filesToWrite = {
    "index.md": indexMd,
    "package.json": packageJSON,
    ".vitepress/config.mts": vitePressConfig(notebooksToProcess),
    ".gitignore": gitIgnore,
  };

  // create .vitepress directory
  await Deno.mkdir(path.join(config.docsPath, ".vitepress"));

  // Write all files in a loop
  for (const [filename, content] of Object.entries(filesToWrite)) {
    await Deno.writeTextFile(path.join(config.docsPath, filename), content);
  }
};
