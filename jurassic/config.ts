// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: config.ipynb

import { z } from "zod";
import path from "node:path";
const configSchema: z.Schema = z.object({
  configPath: z.string(),
  nbsPath: z.string().default("."),
  outputPath: z.string().default("."),
});

export type Config = z.infer<typeof configSchema>;
const findConfig = async (
  dir: string = Deno.cwd(),
  d = 0,
  config = "jurassic.json",
  maxD = 10,
): Promise<string> => {
  if (d >= maxD) throw new Error("max depth reached");

  try {
    const f = path.join(dir, config);
    await Deno.lstat(f);
    return f;
  } catch {
    return findConfig(path.join(dir, "../"), d + 1);
  }
};
export const getTestConfig = (baseDir: string): Config =>
  configSchema.parse({
    configPath: path.resolve(baseDir, "jurassic.json"),
    nbsPath: path.join(baseDir, "nbs"),
    outputPath: path.join(baseDir, "jurassic"),
  });
export const getConfig = async (): Promise<Config> => {
  const cf = await findConfig();
  const dcf = path.dirname(cf);
  const c = configSchema.parse(
    Object.assign({ configPath: cf }, JSON.parse(await Deno.readTextFile(cf))),
  );
  c.nbsPath = path.join(dcf, c.nbsPath);
  c.outputPath = path.join(dcf, c.outputPath);
  return c;
};
